function LinkedList() {
  var length = 0;
  var head = null;

  var Node = function(element){
    this.element = element;
    this.next = null;
  };

  this.size = function() {
    return length;
  };

  this.head = function(){
    return head;
  };

  this.add = function(element){
    var node = new Node(element);
    if(head === null){
        head = node;
    } else {
      var currentNode = head;

      while(currentNode.next){
        currentNode = currentNode.next;
      }

      currentNode.next = node;
    }

    length++;
  };

  this.remove = function(element){
    var currentNode = head;
    var previousNode;
    if(currentNode.element === element){
      head = currentNode.next;
    } else {
      while(currentNode.element !== element) {
        previousNode = currentNode;
        currentNode = currentNode.next;
      }

      previousNode.next = currentNode.next;
    }

    length --;
  };

  // Only change code below this line
this.isEmpty = function(){
    if(this.size() > 0){
      return false
    } else {
      return true
    }
  }

  this.indexOf = function(element){
    if(head.element === element){
      return 0;
    }
    let current = head.next;
    let index = 0;
    while(current != null){
      index++;
      if(current.element === element){
        return index;
      }
    current = current.next;
    }
   return -1
  }
   this.elementAt = function(i) {
    let currentNode = head, currentElement, index = -1, indexReached = false;

    while (!indexReached && currentNode) {
      index++;
      currentElement = currentNode.element;
      if(index === i) {
        indexReached = true;
      }
      currentNode = currentNode.next;
    } 

    return indexReached ? currentElement : undefined;
  }

  // Only change code above this line
}